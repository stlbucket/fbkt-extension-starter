set search_path to soro, public;

-- INSERT MISSING WSLCB ITEMS

{{#each wslcbInventoryItems}}
  with new_item as (
    insert into inventory_item(
      inventory_type_id,
      weight_grams
    )
    select
      (select inventory_type_id from wslcb_inventory_type where id = '{{inventorytype}}'),
      {{#if usable_weight}}{{usable_weight}}{{else}}NULL{{/if}}
    where not exists (select id from wslcb_inventory_item where wslcb_id = '{{id}}')
    returning id
  )
  insert into wslcb_inventory_item (
    wslcb_id,
    wslcb_inventory_type_id,
    inventoryparentid,
    inventory_item_id,
    net_package,
    currentroom,
    location,
    deleted,
    productname,
    is_medical,
    sessiontime,
    plantid,
    inventorystatus,
    usable_weight,
    parentid,
    wet,
    transactionid,
    remaining_quantity,
    is_sample,
    strain,
    seized,
    transactionid_original,
    inventorystatustime,
    source_id
  )
  select
    '{{id}}',
    {{inventorytype}},
    '{{inventoryparentid}}',
    (select id from new_item),
    '{{net_package}}',
    '{{currentroom}}',
    '{{location}}',
    {{deleted}},
    '{{productname}}',
    {{#if is_medical}}{{is_medical}}{{else}}NULL{{/if}},
    '{{sessiontime}}',
    '{{plantid}}',
    {{#if inventorystatus}}{{inventorystatus}}{{else}}NULL{{/if}},
    {{#if usable_weight}}{{usable_weight}}{{else}}NULL{{/if}},
    '{{parentid}}',
    {{wet}},
    '{{transactionid}}',
    '{{remaining_quantity}}',
    '{{is_sample}}',
    '{{strain}}',
    '{{seized}}',
    '{{transactionid_original}}',
    '{{inventorystatustime}}',
    '{{source_id}}'
  where not exists (select id from wslcb_inventory_item where wslcb_id = '{{id}}');

  -------------------------------------------------
{{/each}}
